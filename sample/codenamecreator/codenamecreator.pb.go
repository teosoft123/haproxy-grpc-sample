// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: codenamecreator.proto

package codenamecreator

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Unused   []byte `protobuf:"bytes,2,opt,name=unused,proto3" json:"unused,omitempty"`
}

func (x *NameRequest) Reset() {
	*x = NameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codenamecreator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRequest) ProtoMessage() {}

func (x *NameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codenamecreator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRequest.ProtoReflect.Descriptor instead.
func (*NameRequest) Descriptor() ([]byte, []int) {
	return file_codenamecreator_proto_rawDescGZIP(), []int{0}
}

func (x *NameRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *NameRequest) GetUnused() []byte {
	if x != nil {
		return x.Unused
	}
	return nil
}

type NameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameResult) Reset() {
	*x = NameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codenamecreator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameResult) ProtoMessage() {}

func (x *NameResult) ProtoReflect() protoreflect.Message {
	mi := &file_codenamecreator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameResult.ProtoReflect.Descriptor instead.
func (*NameResult) Descriptor() ([]byte, []int) {
	return file_codenamecreator_proto_rawDescGZIP(), []int{1}
}

func (x *NameResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_codenamecreator_proto protoreflect.FileDescriptor

var file_codenamecreator_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x76, 0x0a, 0x0f,
	0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x14, 0x4b,
	0x65, 0x65, 0x70, 0x47, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x0c, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x3b, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_codenamecreator_proto_rawDescOnce sync.Once
	file_codenamecreator_proto_rawDescData = file_codenamecreator_proto_rawDesc
)

func file_codenamecreator_proto_rawDescGZIP() []byte {
	file_codenamecreator_proto_rawDescOnce.Do(func() {
		file_codenamecreator_proto_rawDescData = protoimpl.X.CompressGZIP(file_codenamecreator_proto_rawDescData)
	})
	return file_codenamecreator_proto_rawDescData
}

var file_codenamecreator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_codenamecreator_proto_goTypes = []interface{}{
	(*NameRequest)(nil), // 0: NameRequest
	(*NameResult)(nil),  // 1: NameResult
}
var file_codenamecreator_proto_depIdxs = []int32{
	0, // 0: CodenameCreator.GetCodename:input_type -> NameRequest
	0, // 1: CodenameCreator.KeepGettingCodenames:input_type -> NameRequest
	1, // 2: CodenameCreator.GetCodename:output_type -> NameResult
	1, // 3: CodenameCreator.KeepGettingCodenames:output_type -> NameResult
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_codenamecreator_proto_init() }
func file_codenamecreator_proto_init() {
	if File_codenamecreator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_codenamecreator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codenamecreator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_codenamecreator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_codenamecreator_proto_goTypes,
		DependencyIndexes: file_codenamecreator_proto_depIdxs,
		MessageInfos:      file_codenamecreator_proto_msgTypes,
	}.Build()
	File_codenamecreator_proto = out.File
	file_codenamecreator_proto_rawDesc = nil
	file_codenamecreator_proto_goTypes = nil
	file_codenamecreator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CodenameCreatorClient is the client API for CodenameCreator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CodenameCreatorClient interface {
	GetCodename(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResult, error)
	KeepGettingCodenames(ctx context.Context, opts ...grpc.CallOption) (CodenameCreator_KeepGettingCodenamesClient, error)
}

type codenameCreatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCodenameCreatorClient(cc grpc.ClientConnInterface) CodenameCreatorClient {
	return &codenameCreatorClient{cc}
}

func (c *codenameCreatorClient) GetCodename(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResult, error) {
	out := new(NameResult)
	err := c.cc.Invoke(ctx, "/CodenameCreator/GetCodename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codenameCreatorClient) KeepGettingCodenames(ctx context.Context, opts ...grpc.CallOption) (CodenameCreator_KeepGettingCodenamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CodenameCreator_serviceDesc.Streams[0], "/CodenameCreator/KeepGettingCodenames", opts...)
	if err != nil {
		return nil, err
	}
	x := &codenameCreatorKeepGettingCodenamesClient{stream}
	return x, nil
}

type CodenameCreator_KeepGettingCodenamesClient interface {
	Send(*NameRequest) error
	Recv() (*NameResult, error)
	grpc.ClientStream
}

type codenameCreatorKeepGettingCodenamesClient struct {
	grpc.ClientStream
}

func (x *codenameCreatorKeepGettingCodenamesClient) Send(m *NameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *codenameCreatorKeepGettingCodenamesClient) Recv() (*NameResult, error) {
	m := new(NameResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CodenameCreatorServer is the server API for CodenameCreator service.
type CodenameCreatorServer interface {
	GetCodename(context.Context, *NameRequest) (*NameResult, error)
	KeepGettingCodenames(CodenameCreator_KeepGettingCodenamesServer) error
}

// UnimplementedCodenameCreatorServer can be embedded to have forward compatible implementations.
type UnimplementedCodenameCreatorServer struct {
}

func (*UnimplementedCodenameCreatorServer) GetCodename(context.Context, *NameRequest) (*NameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodename not implemented")
}
func (*UnimplementedCodenameCreatorServer) KeepGettingCodenames(CodenameCreator_KeepGettingCodenamesServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepGettingCodenames not implemented")
}

func RegisterCodenameCreatorServer(s *grpc.Server, srv CodenameCreatorServer) {
	s.RegisterService(&_CodenameCreator_serviceDesc, srv)
}

func _CodenameCreator_GetCodename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodenameCreatorServer).GetCodename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CodenameCreator/GetCodename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodenameCreatorServer).GetCodename(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodenameCreator_KeepGettingCodenames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CodenameCreatorServer).KeepGettingCodenames(&codenameCreatorKeepGettingCodenamesServer{stream})
}

type CodenameCreator_KeepGettingCodenamesServer interface {
	Send(*NameResult) error
	Recv() (*NameRequest, error)
	grpc.ServerStream
}

type codenameCreatorKeepGettingCodenamesServer struct {
	grpc.ServerStream
}

func (x *codenameCreatorKeepGettingCodenamesServer) Send(m *NameResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *codenameCreatorKeepGettingCodenamesServer) Recv() (*NameRequest, error) {
	m := new(NameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CodenameCreator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CodenameCreator",
	HandlerType: (*CodenameCreatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodename",
			Handler:    _CodenameCreator_GetCodename_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepGettingCodenames",
			Handler:       _CodenameCreator_KeepGettingCodenames_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "codenamecreator.proto",
}
